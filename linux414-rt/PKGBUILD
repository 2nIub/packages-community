# Based on the file created for Arch Linux by:
# Tobias Powalowski <tpowa@archlinux.org>
# Thomas Baechler <thomas@archlinux.org>

# Maintainer: Bernhard Landauer <oberon@manjaro.org>
# Maintainer: Philip MÃ¼ller <philm@manjaro.org>

pkgbase=linux-rt
pkgname=('linux414-rt' 'linux414-rt-headers')
_kernelname=-MANJARO
_basekernel=4.14
_sub=1
_basever=414-rt
_pkgver=${_basekernel}.${_sub}
_rtpatchver=rt3
_bfq=v8r12
_bfqdate=20171108
pkgver=${_pkgver}_${_rtpatchver}
pkgrel=1
arch=('x86_64')
url="http://www.kernel.org/"
license=('GPL2')
makedepends=('xmlto' 'docbook-xsl' 'kmod' 'inetutils' 'bc' 'elfutils')
options=('!strip')
source=("https://www.kernel.org/pub/linux/kernel/v4.x/linux-${_basekernel}.tar.xz"
        # upstream patch
        "http://www.kernel.org/pub/linux/kernel/v4.x/patch-${_pkgver}.xz"
        # the main kernel config files
        'config.x86_64'
        'config.rt'
        'config.no_hz'
        # standard config files for mkinitcpio ramdisk
        "${pkgname}.preset"
        '60-linux.hook'     # pacman hook for depmod
        '90-linux.hook'     # pacman hook for initramfs regeneration
        # BFQ
        0001-BFQ-${_bfq}-${_bfqdate}.patch
        0002-BFQ-${_bfq}-WARN-ON.patch
        # ARCH Patches
        # MANJARO Patches
        # Zen temperature
        '0001-zen-temp.patch::https://lkml.org/lkml/diff/2017/9/6/682/1'
        '0002-zen-temp.patch::https://lkml.org/lkml/diff/2017/9/6/683/1'
        '0003-zen-temp.patch::https://lkml.org/lkml/diff/2017/9/6/684/1'
        # Bootsplash
        '0001-bootsplash.patch::https://patchwork.kernel.org/patch/10026659/raw/'
        '0002-bootsplash.patch::https://patchwork.kernel.org/patch/10026661/raw/'
        '0003-bootsplash.patch::https://patchwork.kernel.org/patch/10026617/raw/'
        '0004-bootsplash.patch::https://patchwork.kernel.org/patch/10026615/raw/'
        '0005-bootsplash.patch::https://patchwork.kernel.org/patch/10026635/raw/'
        '0006-bootsplash.patch::https://patchwork.kernel.org/patch/10026643/raw/'
        '0007-bootsplash.patch::https://patchwork.kernel.org/patch/10026641/raw/'
        '0008-bootsplash.patch::https://patchwork.kernel.org/patch/10026647/raw/'
        '0009-bootsplash.patch::https://patchwork.kernel.org/patch/10026627/raw/'
        '0010-bootsplash.patch::https://patchwork.kernel.org/patch/10026639/raw/'
        '0011-bootsplash.patch::https://patchwork.kernel.org/patch/10026629/raw/'
        '0012-bootsplash.patch::https://patchwork.kernel.org/patch/10026637/raw/'
        '0013-bootsplash.patch::https://patchwork.kernel.org/patch/10026619/raw/'
        '0014-bootsplash.patch::https://patchwork.kernel.org/patch/10026623/raw/'
        # Fix HP-WMI for libinput v1.9.1+
        'hp-wmi-fix-tablet-mode-detection-for-convertibles.patch::https://github.com/torvalds/linux/commit/9968e12a291e639dd51d1218b694d440b22a917f.patch'
        # RT Patch
        "https://www.kernel.org/pub/linux/kernel/projects/rt/${_basekernel}/older/patch-${_pkgver}-${_rtpatchver}.patch.xz"
        "https://www.kernel.org/pub/linux/kernel/projects/rt/${_basekernel}/older/patch-${_pkgver}-${_rtpatchver}.patch.sign"
        'fix-race-in-PRT-wait-for-completion-simple-wait-code_Nvidia-RT-160319.patch')
sha256sums=('f81d59477e90a130857ce18dc02f4fbe5725854911db1e7ba770c7cd350f96a7'
            '5af72b487fbcc8e7fd3f5392271490c8498ffb2048e77abaf406971a7382f8d7'
            '310385c9970a7d4a846f9d45fde84a6f3c79fdb7d851fa57a2429671d9725ebb'
            '7b4bb4b54f70001455326e606d408ec9d1dcd6fa49dd729c3392acb5179131ba'
            'ca4712f892ec934e660a0423bd5198f5a02fcb81557f608df8318247cc2f28ba'
            '43942683a7ff01b180dff7f3de2db4885d43ab3d4e7bd0e1918c3aaf2ee061f4'
            'ae2e95db94ef7176207c690224169594d49445e04249d2499e9d2fbc117a0b21'
            '90831589b7ab43d6fab11bfa3ad788db14ba77ea4dc03d10ee29ad07194691e1'
            '5ac0d9fb774ed038c5537c59836b389bb64bdb50a01f32d0ee8ae03159ca9198'
            '8f7069fd2c530ef60f4c700e0dc2d486424485cabff8b1324d3921c86cc7e1cf'
            'a1b1c30d53d0a7ffe2b84331f634388807489b807b20cc24041e2591f7da2ec1'
            'df9ff4580281ce431b42490a69f51d0a839471983930044bebe268aaee70c5ad'
            '009da98553e3c9b5d452b7850aac25b9e81fa39de9f2aa33744c012c1a912006'
            '97168b7c5fd584f5836809ff2dec1b3824b2d11f41eb954560adf4e2a31a138d'
            '291d28f8e0ec93f967a2a51797413da13d2d4c49824b79bdf3b14454b3f43e3b'
            'bbfe704b6c35f6c751433441e061191f3357f5150b49137d647d3421a590d70d'
            '8c491bd4095b0b9fbbb87daaedcec88307ae0e146761d525950ccf5bd026ace2'
            'bf0ab81a093285e3b0f7c2e7fbc30f884089bc84e3a8aed45274aefa75f507e9'
            '8dbb5ab3cb99e48d97d4e2f2e3df5d0de66f3721b4f7fd94a708089f53245c77'
            'cdbb96ffc0cfc731be97b9048a49b69627f1a93c5c735b1238115573e72326c9'
            '03db55ebac967ed68e70ca2ef139d63ce4d282f9d842b24c12545d4b559aa473'
            'f0578a14e34aecb9d35b3b8d38b42b9b4905d07875e6388b3038b3d60af9cc2d'
            '4e761d422da798c68024909318b039d84a246457e95a7f25fd90ef3ae198abf6'
            'c3b6bed630d136e4db05a682e0df7ef5e84e794813d2527f03b9b2bd16b7bfae'
            '7c274dd4871e43ee9b2aae0cd418723f642a1998e5d67713339a834b7ca74fbb'
            '4bcd5ebae144f452644d70ff3df7cc1072244419c86dcfa1e274fea1be4a5597'
            'c3071533fe16a4a5a9cb799eedd69767cc1046c2e6cfc7b7a645847bbc2bab10'
            '66120f53d43a3ebef4ed6bd3cae6d75b8f13c2abdfd159df0e77c775cf01cca6'
            'f122717f0d9ac0a40e583794f1f2b4959f9de312591f753d3db197312c8d97b9'
            'SKIP'
            '85f7612edfa129210343d6a4fe4ba2a4ac3542d98b7e28c8896738e7e6541c06')
validpgpkeys=('64254695FFF0AA4466CC19E67B96E8162A8CF5D1' # Sebastian Andrzej Siewior
            '4FE5E3262872E4CC')

_kernelname=${pkgbase#linux}

prepare() {
  cd "linux-${_basekernel}"

  # add upstream patch
  msg "applying patch-${_pkgver}"
  patch -p1 -i "${srcdir}/patch-${_pkgver}"

  # libinput v1.9.1 issue
  # see: https://bugs.freedesktop.org/show_bug.cgi?id=103561
  patch -Np1 -i "${srcdir}/hp-wmi-fix-tablet-mode-detection-for-convertibles.patch"

  # Add support for temperature sensors on Family 17h (Ryzen) processors.
  patch -Np1 -i "${srcdir}/0001-zen-temp.patch"
  patch -Np1 -i "${srcdir}/0002-zen-temp.patch"
  patch -Np1 -i "${srcdir}/0003-zen-temp.patch"

  # Add bootsplash - http://lkml.iu.edu/hypermail/linux/kernel/1710.3/01542.html
  patch -Np1 -i "${srcdir}/0001-bootsplash.patch"
  patch -Np1 -i "${srcdir}/0002-bootsplash.patch"
  patch -Np1 -i "${srcdir}/0003-bootsplash.patch"
  patch -Np1 -i "${srcdir}/0004-bootsplash.patch"
  patch -Np1 -i "${srcdir}/0005-bootsplash.patch"
  patch -Np1 -i "${srcdir}/0006-bootsplash.patch"
  patch -Np1 -i "${srcdir}/0007-bootsplash.patch"
  patch -Np1 -i "${srcdir}/0008-bootsplash.patch"
  patch -Np1 -i "${srcdir}/0009-bootsplash.patch"
  patch -Np1 -i "${srcdir}/0010-bootsplash.patch"
  patch -Np1 -i "${srcdir}/0011-bootsplash.patch"
  patch -Np1 -i "${srcdir}/0012-bootsplash.patch"
  patch -Np1 -i "${srcdir}/0013-bootsplash.patch"
  patch -Np1 -i "${srcdir}/0014-bootsplash.patch"

  # Add RT patch
  msg "applying patch-${_pkgver}-${_rtpatchver}.patch"
  patch -p1 -i "${srcdir}/patch-${_pkgver}-${_rtpatchver}.patch"

  # fix X hanging on certain NVIDIA cards
  msg "fix-race-in-PRT-wait-for-completion-simple-wait-code_Nvidia-RT-160319.patch"
  patch -p1 -i "${srcdir}/fix-race-in-PRT-wait-for-completion-simple-wait-code_Nvidia-RT-160319.patch"

  # add BFQ scheduler
  msg "Fix naming schema in BFQ-MQ patch"
  sed -i -e "s|SUBLEVEL = 0|SUBLEVEL = ${_sub}|g" \
      -i -e "s|EXTRAVERSION = -rc8|EXTRAVERSION =|g" \
      -i -e "s|EXTRAVERSION = -rc8-bfq-mq|EXTRAVERSION =|g" \
      -i -e "s|NAME = Fearless Coyote|NAME = Petit Gorille|g" \
      "${srcdir}/0001-BFQ-${_bfq}-${_bfqdate}.patch"
  #"${srcdir}/0001-BFQ-${_bfq}-v${pkgver}.patch"
  #patch -Np1 -i "${srcdir}/0001-BFQ-${_bfq}-v${pkgver}.patch"
  patch -Np1 -i "${srcdir}/0001-BFQ-${_bfq}-${_bfqdate}.patch"
  patch -Np1 -i "${srcdir}/0002-BFQ-${_bfq}-WARN-ON.patch"

  msg "All patches have successfully been applied"
  
  cat "${srcdir}/config.x86_64" > ./.config
  cat "${srcdir}/config.rt" >> ./.config

  # Set processor interrupt frequency to 1000Hz
  sed -i "s|CONFIG_HZ_300=y|# CONFIG_HZ_300 is not set|g" ./.config
  sed -i "s|# CONFIG_HZ_1000 is not set|CONFIG_HZ_1000=y|g" ./.config
  sed -i "s|CONFIG_HZ=300|CONFIG_HZ=1000|g" ./.config

  # Add support for latencytop to test latency
  sed -i "s|# CONFIG_LATENCYTOP is not set|CONFIG_LATENCYTOP=y|g" ./.config

  # spinlock config
  sed -i "/CONFIG_UNINLINE_SPIN_UNLOCK=y/d" ./.config
  sed -i "/CONFIG_MUTEX_SPIN_ON_OWNER=y/d" ./.config
  sed -i "/CONFIG_RWSEM_SPIN_ON_OWNER=y/d" ./.config
  sed -i "/CONFIG_LOCK_SPIN_ON_OWNER=y/d" ./.config
  
  # Reducing Scheduling-Clock Ticks, configure NO_HZ
  sed -i "s|CONFIG_NO_HZ_IDLE=y|# CONFIG_NO_HZ_IDLE is not set|g" ./.config
  sed -i "s|# CONFIG_NO_HZ_FULL is not set|CONFIG_NO_HZ_FULL=y|g" ./.config
  sed -i "/CONFIG_TICK_CPU_ACCOUNTING=y/d" ./.config
  sed -i "s|# CONFIG_VIRT_CPU_ACCOUNTING_GEN is not set|CONFIG_VIRT_CPU_ACCOUNTING_GEN=y|g" ./.config
  sed -i "s|# CONFIG_IRQ_TIME_ACCOUNTING is not set|CONFIG_VIRT_CPU_ACCOUNTING=y|g" ./.config

  cat "${srcdir}/config.no_hz" >> ./.config
  
  # set extraversion to pkgrel
  sed -ri "s|^(EXTRAVERSION =).*|\1 -${pkgrel}|" Makefile

  # don't run depmod on 'make install'. We'll do this ourselves in packaging
  sed -i '2iexit 0' scripts/depmod.sh

  # get kernel version
  make prepare

  # rewrite configuration
  yes "" | make config >/dev/null
}

build() {
  cd "${srcdir}/linux-${_basekernel}"

  # build!
  make ${MAKEFLAGS} LOCALVERSION= bzImage modules
}

package_linux414-rt() {
  pkgdesc="The ${pkgbase/linux/Linux} kernel and modules"
  depends=('coreutils' 'linux-firmware' 'kmod' 'mkinitcpio>=0.7')
  optdepends=('crda: to set the correct wireless channels of your country')
  provides=("linux=${pkgver}")
  backup=("etc/mkinitcpio.d/${pkgname}.preset")
  install=${pkgname}.install

  cd "${srcdir}/linux-${_basekernel}"

  # get kernel version
  _kernver="$(make LOCALVERSION= kernelrelease)"

  mkdir -p "${pkgdir}"/{boot,usr/lib/modules}
  make LOCALVERSION= INSTALL_MOD_PATH="${pkgdir}" modules_install
  cp arch/x86/boot/bzImage "${pkgdir}/boot/vmlinuz-${_basekernel}${_kernelname}-${CARCH}"

  # add kernel version
  echo "${_pkgver}-${pkgrel}-${_rtpatchver}-MANJARO x64" > "${pkgdir}/boot/linux-${_basever}-${CARCH}.kver"

  # make room for external modules
  local _extramodules="extramodules-${_basekernel}${_kernelname:--MANJARO}-MANJARO"
  ln -s "../${_extramodules}" "${pkgdir}/lib/modules/${_kernver}/extramodules"

  # add real version for building modules and running depmod from post_install/upgrade
  echo "${_kernver}" |
    install -Dm644 /dev/stdin "${pkgdir}/usr/lib/modules/${_extramodules}/version"

  # remove build and source links
  rm -f "${pkgdir}"/lib/modules/${_kernver}/{source,build}

  # now we call depmod...
  depmod -b "${pkgdir}" -F System.map "${_kernver}"

  # move module tree /lib -> /usr/lib
  mkdir -p "${pkgdir}/usr"
  mv "${pkgdir}/lib" "${pkgdir}/usr/"

  # add vmlinux
  install -Dt "${pkgdir}/usr/lib/modules/${_kernver}/build" -m644 vmlinux

  # sed expression for following substitutions
  local _subst="
    s|%PKGBASE%|${pkgname}|g
    s|%BASEKERNEL%|${_basekernel}|g
    s|%ARCH%|${CARCH}|g
    s|%KERNVER%|${_kernver}|g
    s|%EXTRAMODULES%|${_extramodules}|g
  "

  # hack to allow specifying an initially nonexisting install file
  sed "${_subst}" "${startdir}/${install}" > "${startdir}/${install}.pkg"
  true && install=${install}.pkg

  # install mkinitcpio preset file
  sed "${_subst}" ${srcdir}/{pkgname}.preset |
    install -Dm644 /dev/stdin "${pkgdir}/etc/mkinitcpio.d/${pkgname}.preset"

  # install pacman hooks
  sed "${_subst}" ${srcdir}/60-linux.hook |
    install -Dm644 /dev/stdin "${pkgdir}/usr/share/libalpm/hooks/60-${pkgname}.hook"
  sed "${_subst}" ${srcdir}/90-linux.hook |
    install -Dm644 /dev/stdin "${pkgdir}/usr/share/libalpm/hooks/90-${pkgname}.hook"
}

package_linux414-rt-headers() {
  pkgdesc="Header files and scripts for building modules for ${pkgname/linux/Linux} kernel"
  provides=("linux-headers=${pkgver}")

  cd "${srcdir}/linux-${_basekernel}"
  local _builddir="${pkgdir}/usr/lib/modules/${_kernver}/build"

  install -Dt "${_builddir}" -m644 Makefile .config Module.symvers
  install -Dt "${_builddir}/kernel" -m644 kernel/Makefile

  mkdir "${_builddir}/.tmp_versions"

  cp -t "${_builddir}" -a include scripts

  install -Dt "${_builddir}/arch/${KARCH}" -m644 "arch/${KARCH}/Makefile"
  install -Dt "${_builddir}/arch/${KARCH}/kernel" -m644 "arch/${KARCH}/kernel/asm-offsets.s"

  cp -t "${_builddir}/arch/${KARCH}" -a "arch/${KARCH}/include"

  install -Dt "${_builddir}/drivers/md" -m644 drivers/md/*.h
  install -Dt "${_builddir}/net/mac80211" -m644 net/mac80211/*.h

  # http://bugs.archlinux.org/task/9912
  install -Dt "${_builddir}/drivers/media/dvb-core" -m644 drivers/media/dvb-core/*.h

  # http://bugs.archlinux.org/task/13146
  install -Dt "${_builddir}/drivers/media/dvb-frontends" -m644 drivers/media/dvb-frontends/lgdt330x.h
  install -Dt "${_builddir}/drivers/media/i2c" -m644 drivers/media/i2c/msp3400-driver.h

  # http://bugs.archlinux.org/task/20402
  install -Dt "${_builddir}/drivers/media/usb/dvb-usb" -m644 drivers/media/usb/dvb-usb/*.h
  install -Dt "${_builddir}/drivers/media/dvb-frontends" -m644 drivers/media/dvb-frontends/*.h
  install -Dt "${_builddir}/drivers/media/tuners" -m644 drivers/media/tuners/*.h

  # add xfs and shmem for aufs building
  mkdir -p "${_builddir}"/{fs/xfs,mm}

  # copy in Kconfig files
  find . -name Kconfig\* -exec install -Dm644 {} "${_builddir}/{}" \;

  if [ -f "${_builddir}/tools/objtool" ]; then
    # add objtool for external module building and enabled VALIDATION_STACK option
    install -Dt "${_builddir}/tools/objtool" tools/objtool/objtool
  fi


  # remove unneeded architectures
  local _arch
  for _arch in "${_builddir}"/arch/*/; do
    [[ ${_arch} == */x86/ ]] && continue
    rm -r "${_arch}"
  done

  # remove files already in linux-docs package
  rm -r "${_builddir}/Documentation"

  # Fix permissions
  chmod -R u=rwX,go=rX "${_builddir}"

  # strip scripts directory
  local _binary _strip
  while read -rd '' _binary; do
    case "$(file -bi "${_binary}")" in
      *application/x-sharedlib*)  _strip="${STRIP_SHARED}"   ;; # Libraries (.so)
      *application/x-archive*)    _strip="${STRIP_STATIC}"   ;; # Libraries (.a)
      *application/x-executable*) _strip="${STRIP_BINARIES}" ;; # Binaries
      *) continue ;;
    esac
    /usr/bin/strip ${_strip} "${_binary}"
  done < <(find "${_builddir}/scripts" -type f -perm -u+w -print0 2>/dev/null)
}
