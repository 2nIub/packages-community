diff -rupN arch-update/extension.js arch-update-new/extension.js
--- arch-update/extension.js	2017-10-09 10:17:01.000000000 +0200
+++ arch-update-new/extension.js	2017-10-16 18:31:56.544997000 +0200
@@ -38,23 +38,27 @@ const Me = ExtensionUtils.getCurrentExte
 const Utils = Me.imports.utils;
 
 const Format = imports.format;
-const Gettext = imports.gettext.domain('arch-update');
+const Gettext = imports.gettext.domain('manjaro-update');
 const _ = Gettext.gettext;
 
 /* Options */
 let ALWAYS_VISIBLE     = true;
 let SHOW_COUNT         = true;
-let BOOT_WAIT		   = 15;      // 15s
-let CHECK_INTERVAL     = 60*60;   // 1h
+let BOOT_WAIT		   = 30;      // 15s
+let CHECK_INTERVAL     = 360*360;   // 1h
 let NOTIFY             = false;
 let HOWMUCH            = 0;
 let TRANSIENT          = true;
-let UPDATE_CMD         = "gnome-terminal -e 'sh -c  \"sudo pacman -Syu ; echo Done - Press enter to exit; read\" '";
-let CHECK_CMD          = "/usr/bin/checkupdates";
+let UPDATE_CMD         = "update-command";
+let CHECK_CMD          = "/usr/bin/update-check";
 let PACMAN_DIR         = "/var/lib/pacman/local";
 let STRIP_VERSIONS     = true;
 let AUTO_EXPAND_LIST   = 0;
 
+// fhdk - adding items for Pamac
+let PAMAC_MANAGER	   = "/usr/bin/pamac-manager";
+// let PAMAC_UPDATER      = "/usr/bin/pamac-updater";
+
 /* Variables we want to keep when extension is disabled (eg during screen lock) */
 let FIRST_BOOT         = 1;
 let UPDATES_PENDING    = -1;
@@ -62,381 +66,400 @@ let UPDATES_LIST       = [];
 
 
 function init() {
-	String.prototype.format = Format.format;
-	Utils.initTranslations("arch-update");
+    String.prototype.format = Format.format;
+    Utils.initTranslations("manjaro-update");
 }
 
-const ArchUpdateIndicator = new Lang.Class({
-	Name: 'ArchUpdateIndicator',
-	Extends: PanelMenu.Button,
-
-	_TimeoutId: null,
-	_FirstTimeoutId: null,
-	_updateProcess_sourceId: null,
-	_updateProcess_stream: null,
-	_updateProcess_pid: null,
-	_updateList: [],
-
-	_init: function() {
-		this.parent(0.0, "ArchUpdateIndicator");
-		Gtk.IconTheme.get_default().append_search_path(Me.dir.get_child('icons').get_path());
-
-		this.updateIcon = new St.Icon({icon_name: "arch-unknown-symbolic", style_class: 'system-status-icon'});
-
-		let box = new St.BoxLayout({ vertical: false, style_class: 'panel-status-menu-box' });
-		this.label = new St.Label({ text: '',
-			y_expand: true,
-			y_align: Clutter.ActorAlign.CENTER });
-
-		box.add_child(this.updateIcon);
-		box.add_child(this.label);
-		this.actor.add_child(box);
-
-		// Prepare the special menu : a submenu for updates list that will look like a regular menu item when disabled
-		// Scrollability will also be taken care of by the popupmenu
-		this.menuExpander = new PopupMenu.PopupSubMenuMenuItem('');
-		this.updatesListMenuLabel = new St.Label();
-		this.menuExpander.menu.box.add(this.updatesListMenuLabel);
-		this.menuExpander.menu.box.style_class = 'arch-updates-list';
-
-		// Other standard menu items
-		let settingsMenuItem = new PopupMenu.PopupMenuItem(_('Settings'));
-		this.updateNowMenuItem = new PopupMenu.PopupMenuItem(_('Update now'));
-
-		// A special "Checking" menu item with a stop button
-		this.checkingMenuItem = new PopupMenu.PopupBaseMenuItem( {reactive:false} );
-		let checkingLabel = new St.Label({ text: _('Checking') + " …" });
-		let cancelButton = new St.Button({
-			child: new St.Icon({ icon_name: 'process-stop-symbolic' }),
-			style_class: 'system-menu-action arch-updates-menubutton',
-			x_expand: true
-		});
-		cancelButton.set_x_align(Clutter.ActorAlign.END);
-		this.checkingMenuItem.actor.add_actor( checkingLabel );
-		this.checkingMenuItem.actor.add_actor( cancelButton  );
-
-		// A little trick on "check now" menuitem to keep menu opened
-		this.checkNowMenuItem = new PopupMenu.PopupMenuItem( _('Check now') );
-		this.checkNowMenuContainer = new PopupMenu.PopupMenuSection();
-		this.checkNowMenuContainer.actor.add_actor(this.checkNowMenuItem.actor);
-
-		// Assemble all menu items into the popup menu
-		this.menu.addMenuItem(this.menuExpander);
-		this.menu.addMenuItem(new PopupMenu.PopupSeparatorMenuItem());
-		this.menu.addMenuItem(this.updateNowMenuItem);
-		this.menu.addMenuItem(this.checkingMenuItem);
-		this.menu.addMenuItem(this.checkNowMenuContainer);
-		this.menu.addMenuItem(settingsMenuItem);
-
-		// Bind some events
-		this.menu.connect('open-state-changed', Lang.bind(this, this._onMenuOpened));
-		this.checkNowMenuItem.connect('activate', Lang.bind(this, this._checkUpdates));
-		cancelButton.connect('clicked', Lang.bind(this, this._cancelCheck));
-		settingsMenuItem.connect('activate', Lang.bind(this, this._openSettings));
-		this.updateNowMenuItem.connect('activate', Lang.bind(this, this._updateNow));
-
-		// Load settings
-		this._settings = Utils.getSettings();
-		this._settingsChangedId = this._settings.connect('changed', Lang.bind(this, this._applySettings));
-		this._applySettings();
-		this._showChecking(false);
-		this._updateMenuExpander(false, _('Waiting first check'));
-
-		if (FIRST_BOOT) {
-			// Schedule first check only if this is the first extension load
-			// This won't be run again if extension is disabled/enabled (like when screen is locked)
-			let that = this;
-			this._FirstTimeoutId = GLib.timeout_add_seconds(GLib.PRIORITY_DEFAULT, BOOT_WAIT, function () {
-				that._checkUpdates();
-				that._FirstTimeoutId = null;
-				FIRST_BOOT = 0;
-				that._startFolderMonitor();
-				return false; // Run once
-			});
-		} else {
-			// Restore previous state
-			this._updateList = UPDATES_LIST;
-			this._updateStatus(UPDATES_PENDING);
-			this._startFolderMonitor();
-		}
-	},
-
-	_openSettings: function () {
-		Util.spawn([ "gnome-shell-extension-prefs", Me.uuid ]);
-	},
-
-	_updateNow: function () {
-		Util.spawnCommandLine(UPDATE_CMD);
-	},
-
-	_applySettings: function() {
-		ALWAYS_VISIBLE = this._settings.get_boolean('always-visible');
-		SHOW_COUNT = this._settings.get_boolean('show-count');
-		BOOT_WAIT = this._settings.get_int('boot-wait');
-		CHECK_INTERVAL = 60 * this._settings.get_int('check-interval');
-		NOTIFY = this._settings.get_boolean('notify');
-		HOWMUCH = this._settings.get_int('howmuch');
-		TRANSIENT = this._settings.get_boolean('transient');
-		UPDATE_CMD = this._settings.get_string('update-cmd');
-		CHECK_CMD = this._settings.get_string('check-cmd');
-		PACMAN_DIR = this._settings.get_string('pacman-dir');
-		STRIP_VERSIONS = this._settings.get_boolean('strip-versions');
-		AUTO_EXPAND_LIST = this._settings.get_int('auto-expand-list');
-		this._checkShowHide();
-		let that = this;
-		if (this._TimeoutId) GLib.source_remove(this._TimeoutId);
-		this._TimeoutId = GLib.timeout_add_seconds(GLib.PRIORITY_DEFAULT, CHECK_INTERVAL, function () {
-			that._checkUpdates();
-			return true;
-		});
-	},
-
-	destroy: function() {
-		if (this._updateProcess_sourceId) {
-			// We leave the checkupdate process end by itself but undef handles to avoid zombies
-			GLib.source_remove(this._updateProcess_sourceId);
-			this._updateProcess_sourceId = null;
-			this._updateProcess_stream = null;
-		}
-		if (this._FirstTimeoutId) {
-			GLib.source_remove(this._FirstTimeoutId);
-			this._FirstTimeoutId = null;
-		}
-		if (this._TimeoutId) {
-			GLib.source_remove(this._TimeoutId);
-			this._TimeoutId = null;
-		}
-		this.parent();
-	},
-
-	_checkShowHide: function() {
-		if ( UPDATES_PENDING == -3 ) {
-			// Do not apply visibility change while checking for updates
-			return;
-		}
-		if (!ALWAYS_VISIBLE && UPDATES_PENDING < 1) {
-			this.actor.visible = false;
-		} else {
-			this.actor.visible = true;
-		}
-		this.label.visible = SHOW_COUNT;
-	},
-
-	_onMenuOpened: function() {
-		// This event is fired when menu is shown or hidden
-		// Only open the submenu if the menu is being opened and there is something to show
-		this._checkAutoExpandList();
-	},
-
-	_checkAutoExpandList: function() {
-		if (this.menu.isOpen && UPDATES_PENDING > 0 && UPDATES_PENDING <= AUTO_EXPAND_LIST) {
-			this.menuExpander.setSubmenuShown(true);
-		} else {
-			this.menuExpander.setSubmenuShown(false);
-		}
-	},
-
-	_startFolderMonitor: function() {
-		if (PACMAN_DIR) {
-			this.pacman_dir = Gio.file_new_for_path(PACMAN_DIR);
-			this.monitor = this.pacman_dir.monitor_directory(0, null, null);
-			this.monitor.connect('changed', Lang.bind(this, this._onFolderChanged));
-		}
-	},
-	_onFolderChanged: function() {
-		// Folder have changed ! Let's schedule a check in a few seconds
-		let that = this;
-		if (this._FirstTimeoutId) GLib.source_remove(this._FirstTimeoutId);
-		this._FirstTimeoutId = GLib.timeout_add_seconds(GLib.PRIORITY_DEFAULT, 5, function () {
-			that._checkUpdates();
-			that._FirstTimeoutId = null;
-			return false;
-		});
-	},
-
-	_showChecking: function(isChecking) {
-		if (isChecking == true) {
-			this.updateIcon.set_icon_name('arch-unknown-symbolic');
-			this.checkNowMenuContainer.actor.visible = false;
-			this.checkingMenuItem.actor.visible = true;;
-		} else {
-			this.checkNowMenuContainer.actor.visible = true;;
-			this.checkingMenuItem.actor.visible = false;;
-		}
-	},
-
-	_updateStatus: function(updatesCount) {
-		updatesCount = typeof updatesCount === 'number' ? updatesCount : UPDATES_PENDING;
-		if (updatesCount > 0) {
-			// Updates pending
-			this.updateIcon.set_icon_name('arch-updates-symbolic');
-			this._updateMenuExpander( true, Gettext.ngettext( "%d update pending", "%d updates pending", updatesCount ).format(updatesCount) );
-			this.updatesListMenuLabel.set_text( this._updateList.join("\n") );
-			this.label.set_text(updatesCount.toString());
-			if (NOTIFY && UPDATES_PENDING < updatesCount) {
-				if (HOWMUCH > 0) {
-					let updateList = [];
-					if (HOWMUCH > 1) {
-						updateList = this._updateList;
-					} else {
-						// Keep only packets that was not in the previous notification
-						updateList = this._updateList.filter(function(pkg) { return UPDATES_LIST.indexOf(pkg) < 0 });
-					}
-					if (updateList.length > 0) {
-						// Show notification only if there's new updates
-						this._showNotification(
-							Gettext.ngettext( "New Arch Linux Update", "New Arch Linux Updates", updateList.length ),
-							updateList.join(', ')
-						);
-					}
-				} else {
-					this._showNotification(
-						Gettext.ngettext( "New Arch Linux Update", "New Arch Linux Updates", updatesCount ),
-						Gettext.ngettext( "There is %d update pending", "There are %d updates pending", updatesCount ).format(updatesCount)
-					);
-				}
-			}
-			// Store the new list
-			UPDATES_LIST = this._updateList;
+const ManjaroUpdateIndicator = new Lang.Class({
+    Name: 'ManjaroUpdateIndicator',
+    Extends: PanelMenu.Button,
+
+    _TimeoutId: null,
+    _FirstTimeoutId: null,
+    _updateProcess_sourceId: null,
+    _updateProcess_stream: null,
+    _updateProcess_pid: null,
+    _updateList: [],
+
+    _init: function() {
+	this.parent(0.0, "ManjaroUpdateIndicator");
+	Gtk.IconTheme.get_default().append_search_path(Me.dir.get_child('icons').get_path());
+
+	this.updateIcon = new St.Icon({icon_name: "arch-unknown-symbolic", style_class: 'system-status-icon'});
+
+	let box = new St.BoxLayout({ vertical: false, style_class: 'panel-status-menu-box' });
+	this.label = new St.Label({ text: '',
+	    y_expand: true,
+	    y_align: Clutter.ActorAlign.CENTER });
+
+	box.add_child(this.updateIcon);
+	box.add_child(this.label);
+	this.actor.add_child(box);
+
+	// Prepare the special menu : a submenu for updates list that will look like a regular menu item when disabled
+	// Scrollability will also be taken care of by the popupmenu
+	this.menuExpander = new PopupMenu.PopupSubMenuMenuItem('');
+	this.updatesListMenuLabel = new St.Label();
+	this.menuExpander.menu.box.add(this.updatesListMenuLabel);
+	this.menuExpander.menu.box.style_class = 'arch-updates-list';
+
+	// Other standard menu items
+	let settingsMenuItem = new PopupMenu.PopupMenuItem(_('Settings'));
+	this.updateNowMenuItem = new PopupMenu.PopupMenuItem(_('Update now'));
+
+	// fhdk - adding items for Pamac
+	this.launchPmMenuItem = new PopupMenu.PopupMenuItem('Pamac Manager');
+	// this.launchPuMenuItem = new PopupMenu.PopupMenuItem('Pamac Updater')
+
+	// A special "Checking" menu item with a stop button
+	this.checkingMenuItem = new PopupMenu.PopupBaseMenuItem( {reactive:false} );
+	let checkingLabel = new St.Label({ text: _('Checking') + " …" });
+	let cancelButton = new St.Button({
+	    child: new St.Icon({ icon_name: 'process-stop-symbolic' }),
+	    style_class: 'system-menu-action arch-updates-menubutton',
+	    x_expand: true
+	});
+	cancelButton.set_x_align(Clutter.ActorAlign.END);
+	this.checkingMenuItem.actor.add_actor( checkingLabel );
+	this.checkingMenuItem.actor.add_actor( cancelButton  );
+
+	// A little trick on "check now" menuitem to keep menu opened
+	this.checkNowMenuItem = new PopupMenu.PopupMenuItem( _('Check now') );
+	this.checkNowMenuContainer = new PopupMenu.PopupMenuSection();
+	this.checkNowMenuContainer.actor.add_actor(this.checkNowMenuItem.actor);
+
+	// Assemble all menu items into the popup menu
+	this.menu.addMenuItem(this.menuExpander);
+	this.menu.addMenuItem(new PopupMenu.PopupSeparatorMenuItem());
+	this.menu.addMenuItem(this.updateNowMenuItem);
+	this.menu.addMenuItem(this.checkingMenuItem);
+	this.menu.addMenuItem(this.checkNowMenuContainer);
+	this.menu.addMenuItem(settingsMenuItem);
+	// fhdk - adding items for Pamac
+	this.menu.addMenuItem(this.launchPmMenuItem);
+	// this.menu.addMenuItem(this.launchPuMenuItem);
+
+	// Bind some events
+	this.menu.connect('open-state-changed', Lang.bind(this, this._onMenuOpened));
+	this.checkNowMenuItem.connect('activate', Lang.bind(this, this._checkUpdates));
+	cancelButton.connect('clicked', Lang.bind(this, this._cancelCheck));
+	settingsMenuItem.connect('activate', Lang.bind(this, this._openSettings));
+	this.updateNowMenuItem.connect('activate', Lang.bind(this, this._updateNow));
+	// fhdk - adding items for Pamac
+	this.launchPmMenuItem.connect('activate', Lang.bind(this, this._launchPm));
+	// this.launchPuMenuItem.connect('activate', Lang.bind(this, this._launchPu));
+
+	// Load settings
+	this._settings = Utils.getSettings();
+	this._settingsChangedId = this._settings.connect('changed', Lang.bind(this, this._applySettings));
+	this._applySettings();
+	this._showChecking(false);
+	this._updateMenuExpander(false, _('Waiting first check'));
+
+	if (FIRST_BOOT) {
+	    // Schedule first check only if this is the first extension load
+	    // This won't be run again if extension is disabled/enabled (like when screen is locked)
+	    let that = this;
+	    this._FirstTimeoutId = GLib.timeout_add_seconds(GLib.PRIORITY_DEFAULT, BOOT_WAIT, function () {
+		that._checkUpdates();
+		that._FirstTimeoutId = null;
+		FIRST_BOOT = 0;
+		that._startFolderMonitor();
+		return false; // Run once
+	    });
+	} else {
+	    // Restore previous state
+	    this._updateList = UPDATES_LIST;
+	    this._updateStatus(UPDATES_PENDING);
+	    this._startFolderMonitor();
+	}
+    },
+
+    // fhdk - adding items for Pamac
+    _launchPm: function() {
+	Util.spawnCommandLine(PAMAC_MANAGER);
+    },
+    // fhdk - adding items for Pamac
+    // _launchPu: function() {
+	// Util.spawnCommandLine(PAMAC_UPDATER);
+    // },
+
+    _openSettings: function () {
+	Util.spawn([ "gnome-shell-extension-prefs", Me.uuid ]);
+    },
+
+    _updateNow: function () {
+	Util.spawnCommandLine(UPDATE_CMD);
+    },
+
+    _applySettings: function() {
+	ALWAYS_VISIBLE = this._settings.get_boolean('always-visible');
+	SHOW_COUNT = this._settings.get_boolean('show-count');
+	BOOT_WAIT = this._settings.get_int('boot-wait');
+	CHECK_INTERVAL = 60 * this._settings.get_int('check-interval');
+	NOTIFY = this._settings.get_boolean('notify');
+	HOWMUCH = this._settings.get_int('howmuch');
+	TRANSIENT = this._settings.get_boolean('transient');
+	UPDATE_CMD = this._settings.get_string('update-cmd');
+	CHECK_CMD = this._settings.get_string('check-cmd');
+	PACMAN_DIR = this._settings.get_string('pacman-dir');
+	STRIP_VERSIONS = this._settings.get_boolean('strip-versions');
+	AUTO_EXPAND_LIST = this._settings.get_int('auto-expand-list');
+	this._checkShowHide();
+	let that = this;
+	if (this._TimeoutId) GLib.source_remove(this._TimeoutId);
+	this._TimeoutId = GLib.timeout_add_seconds(GLib.PRIORITY_DEFAULT, CHECK_INTERVAL, function () {
+	    that._checkUpdates();
+	    return true;
+	});
+    },
+
+    destroy: function() {
+	if (this._updateProcess_sourceId) {
+	    // We leave the checkupdate process end by itself but undef handles to avoid zombies
+	    GLib.source_remove(this._updateProcess_sourceId);
+	    this._updateProcess_sourceId = null;
+	    this._updateProcess_stream = null;
+	}
+	if (this._FirstTimeoutId) {
+	    GLib.source_remove(this._FirstTimeoutId);
+	    this._FirstTimeoutId = null;
+	}
+	if (this._TimeoutId) {
+	    GLib.source_remove(this._TimeoutId);
+	    this._TimeoutId = null;
+	}
+	this.parent();
+    },
+
+    _checkShowHide: function() {
+	if ( UPDATES_PENDING == -3 ) {
+	    // Do not apply visibility change while checking for updates
+	    return;
+	}
+	if (!ALWAYS_VISIBLE && UPDATES_PENDING < 1) {
+	    this.actor.visible = false;
+	} else {
+	    this.actor.visible = true;
+	}
+	this.label.visible = SHOW_COUNT;
+    },
+
+    _onMenuOpened: function() {
+	// This event is fired when menu is shown or hidden
+	// Only open the submenu if the menu is being opened and there is something to show
+	this._checkAutoExpandList();
+    },
+
+    _checkAutoExpandList: function() {
+	if (this.menu.isOpen && UPDATES_PENDING > 0 && UPDATES_PENDING <= AUTO_EXPAND_LIST) {
+	    this.menuExpander.setSubmenuShown(true);
+	} else {
+	    this.menuExpander.setSubmenuShown(false);
+	}
+    },
+
+    _startFolderMonitor: function() {
+	if (PACMAN_DIR) {
+	    this.pacman_dir = Gio.file_new_for_path(PACMAN_DIR);
+	    this.monitor = this.pacman_dir.monitor_directory(0, null, null);
+	    this.monitor.connect('changed', Lang.bind(this, this._onFolderChanged));
+	}
+    },
+    _onFolderChanged: function() {
+	// Folder have changed ! Let's schedule a check in a few seconds
+	let that = this;
+	if (this._FirstTimeoutId) GLib.source_remove(this._FirstTimeoutId);
+	this._FirstTimeoutId = GLib.timeout_add_seconds(GLib.PRIORITY_DEFAULT, 5, function () {
+	    that._checkUpdates();
+	    that._FirstTimeoutId = null;
+	    return false;
+	});
+    },
+
+    _showChecking: function(isChecking) {
+	if (isChecking == true) {
+	    this.updateIcon.set_icon_name('arch-unknown-symbolic');
+	    this.checkNowMenuContainer.actor.visible = false;
+	    this.checkingMenuItem.actor.visible = true;;
+	} else {
+	    this.checkNowMenuContainer.actor.visible = true;;
+	    this.checkingMenuItem.actor.visible = false;;
+	}
+    },
+
+    _updateStatus: function(updatesCount) {
+	updatesCount = typeof updatesCount === 'number' ? updatesCount : UPDATES_PENDING;
+	if (updatesCount > 0) {
+	    // Updates pending
+	    this.updateIcon.set_icon_name('arch-updates-symbolic');
+	    this._updateMenuExpander( true, Gettext.ngettext( "%d update pending", "%d updates pending", updatesCount ).format(updatesCount) );
+	    this.updatesListMenuLabel.set_text( this._updateList.join("\n") );
+	    this.label.set_text(updatesCount.toString());
+	    if (NOTIFY && UPDATES_PENDING < updatesCount) {
+		if (HOWMUCH > 0) {
+		    let updateList = [];
+		    if (HOWMUCH > 1) {
+			updateList = this._updateList;
+		    } else {
+			// Keep only packets that was not in the previous notification
+			updateList = this._updateList.filter(function(pkg) { return UPDATES_LIST.indexOf(pkg) < 0 });
+		    }
+		    if (updateList.length > 0) {
+			// Show notification only if there's new updates
+			this._showNotification(
+			    Gettext.ngettext( "New Manjaro Update", "New Manjaro Updates", updateList.length ),
+			    updateList.join(', ')
+			);
+		    }
 		} else {
-			this.updatesListMenuLabel.set_text("");
-			this.label.set_text('');
-			if (updatesCount == -1) {
-				// Unknown
-				this.updateIcon.set_icon_name('arch-unknown-symbolic');
-				this._updateMenuExpander( false, '' );
-			} else if (updatesCount == -2) {
-				// Error
-				this.updateIcon.set_icon_name('arch-error-symbolic');
-				this._updateMenuExpander( false, _('Error') );
-			} else {
-				// Up to date
-				this.updateIcon.set_icon_name('arch-uptodate-symbolic');
-				this._updateMenuExpander( false, _('Up to date :)') );
-				UPDATES_LIST = []; // Reset stored list
-			}
-		}
-		UPDATES_PENDING = updatesCount;
-		this._checkAutoExpandList();
-		this._checkShowHide();
-	},
-
-	_updateMenuExpander: function(enabled, label) {
-		if (label == "") {
-			// No text, hide the menuitem
-			this.menuExpander.actor.visible = false;
-		} else {
-		// We make our expander look like a regular menu label if disabled
-			this.menuExpander.actor.reactive = enabled;
-			this.menuExpander._triangle.visible = enabled;
-			this.menuExpander.label.set_text(label);
-			this.menuExpander.actor.visible = true;
-		}
-
-		// 'Update now' visibility is linked so let's save a few lines and set it here
-		this.updateNowMenuItem.actor.reactive = enabled;
-	},
-
-	_checkUpdates: function() {
-		if(this._updateProcess_sourceId) {
-			// A check is already running ! Maybe we should kill it and run another one ?
-			return;
-		}
-		// Run asynchronously, to avoid  shell freeze - even for a 1s check
-		this._showChecking(true);
-		try {
-			// Parse check command line
-			let [parseok, argvp] = GLib.shell_parse_argv( CHECK_CMD );
-			if (!parseok) { throw 'Parse error' };
-			let [res, pid, in_fd, out_fd, err_fd]  = GLib.spawn_async_with_pipes(null, argvp, null, GLib.SpawnFlags.DO_NOT_REAP_CHILD, null);
-			// Let's buffer the command's output - that's a input for us !
-			this._updateProcess_stream = new Gio.DataInputStream({
-				base_stream: new Gio.UnixInputStream({fd: out_fd})
-			});
-			// We will process the output at once when it's done
-			this._updateProcess_sourceId = GLib.child_watch_add(0, pid, Lang.bind(this, function() {this._checkUpdatesRead()}));
-			this._updateProcess_pid = pid;
-		} catch (err) {
-			this._showChecking(false);
-			// TODO log err.message.toString() ?
-			this._updateStatus(-2);
-		}
-	},
-
-	_cancelCheck: function() {
-		if (this._updateProcess_pid == null) { return; };
-		Util.spawnCommandLine( "kill " + this._updateProcess_pid );
-		this._updateProcess_pid = null; // Prevent double kill
-		this._checkUpdatesEnd();
-	},
-
-	_checkUpdatesRead: function() {
-		// Read the buffered output
-		let updateList = [];
-		let out, size;
-		do {
-			[out, size] = this._updateProcess_stream.read_line_utf8(null);
-			if (out) updateList.push(out);
-		} while (out);
-		// If version numbers should be stripped, do it
-		if (STRIP_VERSIONS == true) {
-			updateList = updateList.map(function(p) {
-				// Try to keep only what's before the first space
-				var chunks = p.split(" ",2);
-				return chunks[0];
-			});
-		}
-		this._updateList = updateList;
-		this._checkUpdatesEnd();
-	},
-
-	_checkUpdatesEnd: function() {
-		// Free resources
-		this._updateProcess_stream.close(null);
-		this._updateProcess_stream = null;
-		GLib.source_remove(this._updateProcess_sourceId);
-		this._updateProcess_sourceId = null;
-		this._updateProcess_pid = null;
-		// Update indicator
-		this._showChecking(false);
-		this._updateStatus(this._updateList.length);
-	},
-
-	_showNotification: function(title, message) {
-		if (this._notifSource == null) {
-			// We have to prepare this only once
-			this._notifSource = new MessageTray.SystemNotificationSource();
-			this._notifSource.createIcon = function() {
-				return new St.Icon({ icon_name: 'arch-lit-symbolic' });
-			};
-			// Take care of note leaving unneeded sources
-			this._notifSource.connect('destroy', Lang.bind(this, function() {this._notifSource = null;}));
-			Main.messageTray.add(this._notifSource);
-		}
-		let notification = null;
-		// We do not want to have multiple notifications stacked
-		// instead we will update previous
-		if (this._notifSource.notifications.length == 0) {
-			notification = new MessageTray.Notification(this._notifSource, title, message);
-			notification.addAction( _('Update now') , Lang.bind(this, function() {this._updateNow()}) );
-		} else {
-			notification = this._notifSource.notifications[0];
-			notification.update( title, message, { clear: true });
-		}
-		notification.setTransient(TRANSIENT);
-		this._notifSource.notify(notification);
-	},
+		    this._showNotification(
+			Gettext.ngettext( "New Manjaro Update", "New Manjaro Updates", updatesCount ),
+			Gettext.ngettext( "There is %d update pending", "There are %d updates pending", updatesCount ).format(updatesCount)
+		    );
+		}
+	    }
+	    // Store the new list
+	    UPDATES_LIST = this._updateList;
+	} else {
+	    this.updatesListMenuLabel.set_text("");
+	    this.label.set_text('');
+	    if (updatesCount == -1) {
+		// Unknown
+		this.updateIcon.set_icon_name('arch-unknown-symbolic');
+		this._updateMenuExpander( false, '' );
+	    } else if (updatesCount == -2) {
+		// Error
+		this.updateIcon.set_icon_name('arch-error-symbolic');
+		this._updateMenuExpander( false, _('Error') );
+	    } else {
+		// Up to date
+		this.updateIcon.set_icon_name('arch-uptodate-symbolic');
+		this._updateMenuExpander( false, _('Up to date :)') );
+		UPDATES_LIST = []; // Reset stored list
+	    }
+	}
+	UPDATES_PENDING = updatesCount;
+	this._checkAutoExpandList();
+	this._checkShowHide();
+    },
+
+    _updateMenuExpander: function(enabled, label) {
+	if (label == "") {
+	    // No text, hide the menuitem
+	    this.menuExpander.actor.visible = false;
+	} else {
+	// We make our expander look like a regular menu label if disabled
+	    this.menuExpander.actor.reactive = enabled;
+	    this.menuExpander._triangle.visible = enabled;
+	    this.menuExpander.label.set_text(label);
+	    this.menuExpander.actor.visible = true;
+	}
+
+	// 'Update now' visibility is linked so let's save a few lines and set it here
+	this.updateNowMenuItem.actor.reactive = enabled;
+    },
+
+    _checkUpdates: function() {
+	if(this._updateProcess_sourceId) {
+	    // A check is already running ! Maybe we should kill it and run another one ?
+	    return;
+	}
+	// Run asynchronously, to avoid  shell freeze - even for a 1s check
+	this._showChecking(true);
+	try {
+	    // Parse check command line
+	    let [parseok, argvp] = GLib.shell_parse_argv( CHECK_CMD );
+	    if (!parseok) { throw 'Parse error' };
+	    let [res, pid, in_fd, out_fd, err_fd]  = GLib.spawn_async_with_pipes(null, argvp, null, GLib.SpawnFlags.DO_NOT_REAP_CHILD, null);
+	    // Let's buffer the command's output - that's a input for us !
+	    this._updateProcess_stream = new Gio.DataInputStream({
+		base_stream: new Gio.UnixInputStream({fd: out_fd})
+	    });
+	    // We will process the output at once when it's done
+	    this._updateProcess_sourceId = GLib.child_watch_add(0, pid, Lang.bind(this, function() {this._checkUpdatesRead()}));
+	    this._updateProcess_pid = pid;
+	} catch (err) {
+	    this._showChecking(false);
+	    // TODO log err.message.toString() ?
+	    this._updateStatus(-2);
+	}
+    },
+
+    _cancelCheck: function() {
+	if (this._updateProcess_pid == null) { return; };
+	Util.spawnCommandLine( "kill " + this._updateProcess_pid );
+	this._updateProcess_pid = null; // Prevent double kill
+	this._checkUpdatesEnd();
+    },
+
+    _checkUpdatesRead: function() {
+	// Read the buffered output
+	let updateList = [];
+	let out, size;
+	do {
+	    [out, size] = this._updateProcess_stream.read_line_utf8(null);
+	    if (out) updateList.push(out);
+	} while (out);
+	// If version numbers should be stripped, do it
+	if (STRIP_VERSIONS == true) {
+	    updateList = updateList.map(function(p) {
+		// Try to keep only what's before the first space
+		var chunks = p.split(" ",2);
+		return chunks[0];
+	    });
+	}
+	this._updateList = updateList;
+	this._checkUpdatesEnd();
+    },
+
+    _checkUpdatesEnd: function() {
+	// Free resources
+	this._updateProcess_stream.close(null);
+	this._updateProcess_stream = null;
+	GLib.source_remove(this._updateProcess_sourceId);
+	this._updateProcess_sourceId = null;
+	this._updateProcess_pid = null;
+	// Update indicator
+	this._showChecking(false);
+	this._updateStatus(this._updateList.length);
+    },
+
+    _showNotification: function(title, message) {
+	if (this._notifSource == null) {
+	    // We have to prepare this only once
+	    this._notifSource = new MessageTray.SystemNotificationSource();
+	    this._notifSource.createIcon = function() {
+		return new St.Icon({ icon_name: 'arch-lit-symbolic' });
+	    };
+	    // Take care of note leaving unneeded sources
+	    this._notifSource.connect('destroy', Lang.bind(this, function() {this._notifSource = null;}));
+	    Main.messageTray.add(this._notifSource);
+	}
+	let notification = null;
+	// We do not want to have multiple notifications stacked
+	// instead we will update previous
+	if (this._notifSource.notifications.length == 0) {
+	    notification = new MessageTray.Notification(this._notifSource, title, message);
+	    notification.addAction( _('Update now') , Lang.bind(this, function() {this._updateNow()}) );
+	} else {
+	    notification = this._notifSource.notifications[0];
+	    notification.update( title, message, { clear: true });
+	}
+	notification.setTransient(TRANSIENT);
+	this._notifSource.notify(notification);
+    },
 
 
 });
 
-let archupdateindicator;
+let manjaroupdateindicator;
 
 function enable() {
-	archupdateindicator = new ArchUpdateIndicator();
-	Main.panel.addToStatusArea('ArchUpdateIndicator', archupdateindicator);
+    manjaroupdateindicator = new ManjaroUpdateIndicator();
+    Main.panel.addToStatusArea('ManjaroUpdateIndicator', manjaroupdateindicator);
 }
 
 function disable() {
-	archupdateindicator.destroy();
+    manjaroupdateindicator.destroy();
 }
diff -rupN arch-update/locale/ar/arch-update.po arch-update-new/locale/ar/arch-update.po
--- arch-update/locale/ar/arch-update.po	2017-10-09 10:17:01.000000000 +0200
+++ arch-update-new/locale/ar/arch-update.po	2017-10-15 19:02:12.000000000 +0200
@@ -79,6 +79,7 @@ msgid "Up to date :)"
 msgstr "محَدَّث :)"
 
 #: prefs.xml:57
+#, fuzzy
 msgid "Checking for updates"
 msgstr "يلتمس التحديثات"
 
@@ -95,6 +96,7 @@ msgid "Strip out versions numbers"
 msgstr "أزل أرقام الإصدارات"
 
 #: prefs.xml:141
+#, fuzzy
 msgid "Indicator"
 msgstr "المؤشر"
 
@@ -114,6 +116,7 @@ msgstr ""
 "ابسط قائمة التحديثات تلقائيًا إن كان عددهم أقل من هذا الرقم (0 يعطل هذا)"
 
 #: prefs.xml:218
+#, fuzzy
 msgid "Notification"
 msgstr "التنبيهات"
 
@@ -142,6 +145,7 @@ msgid "All updates names"
 msgstr "كل أسماء التحديثات"
 
 #: prefs.xml:296
+#, fuzzy
 msgid "Basic settings"
 msgstr "الإعدادات الأساسيّة"
 
@@ -158,5 +162,6 @@ msgid "Pacman local directory path - To
 msgstr "مسار دليل Pacman المحلي - لمعرفة أن التحديثات الجديدة ثُبتت"
 
 #: prefs.xml:363
+#, fuzzy
 msgid "Advanced settings"
 msgstr "الإعدادات المتقدمة"
diff -rupN arch-update/locale/ro_RO/arch-update.po arch-update-new/locale/ro_RO/arch-update.po
--- arch-update/locale/ro_RO/arch-update.po	1970-01-01 01:00:00.000000000 +0100
+++ arch-update-new/locale/ro_RO/arch-update.po	2017-10-15 19:02:12.000000000 +0200
@@ -0,0 +1,161 @@
+# SOME DESCRIPTIVE TITLE.
+# Copyright (C) YEAR THE PACKAGE'S COPYRIGHT HOLDER
+# This file is distributed under the same license as the PACKAGE package.
+# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
+# Sorin-Mihai Vârgolici <sorin-mihai@vargolici.com>, 2016.
+#
+msgid ""
+msgstr ""
+"Project-Id-Version: PACKAGE VERSION\n"
+"Report-Msgid-Bugs-To: \n"
+"POT-Creation-Date: 2016-10-20 22:16+0200\n"
+"PO-Revision-Date: 2016-01-04 04:53+0200\n"
+"Last-Translator: Sorin-Mihai Vârgolici <sorin-mihai@vargolici.com>\n"
+"Language: ro_RO\n"
+"MIME-Version: 1.0\n"
+"Content-Type: text/plain; charset=UTF-8\n"
+"Content-Transfer-Encoding: 8bit\n"
+"Plural-Forms: nplurals=2; plural=(n != 1);\n"
+"X-Generator: Gtranslator 2.91.7\n"
+
+#: extension.js:101
+msgid "Settings"
+msgstr "Setări"
+
+#: extension.js:102 extension.js:374
+msgid "Update now"
+msgstr "Actualizează acum"
+
+#: extension.js:105
+msgid "Check now"
+msgstr "Verifică acum"
+
+#: extension.js:126
+msgid "Waiting first check"
+msgstr "Așteaptă prima verificare"
+
+#: extension.js:245
+#, fuzzy, javascript-format
+msgid "%d update pending"
+msgid_plural "%d updates pending"
+msgstr[0] "actualizări în așteptare"
+msgstr[1] "actualizări în așteptare"
+
+#: extension.js:258 extension.js:263
+#, fuzzy
+msgid "New Arch Linux Update"
+msgid_plural "New Arch Linux Updates"
+msgstr[0] "Actualizări noi pentru Arch Linux"
+msgstr[1] "Actualizări noi pentru Arch Linux"
+
+#: extension.js:264
+#, fuzzy, javascript-format
+msgid "There is %d update pending"
+msgid_plural "There are %d updates pending"
+msgstr[0] "actualizări în așteptare"
+msgstr[1] "actualizări în așteptare"
+
+#: extension.js:280
+msgid "Error"
+msgstr "Eroare"
+
+#: extension.js:284
+msgid "Checking"
+msgstr "Se verifică"
+
+#: extension.js:288
+msgid "Up to date :)"
+msgstr "Actualizat :)"
+
+#: prefs.xml:57
+#, fuzzy
+msgid "Checking for updates"
+msgstr "Comandă pentru actualizarea pachetelor"
+
+#: prefs.xml:81
+msgid "Time to wait before first check (seconds)"
+msgstr "Timp de așteptare înainte de prima verificare (secunde)"
+
+#: prefs.xml:100
+msgid "Interval between updates check (minutes)"
+msgstr "Interval între verificări de actualizare (minute)"
+
+#: prefs.xml:119
+msgid "Strip out versions numbers"
+msgstr ""
+
+#: prefs.xml:141
+#, fuzzy
+msgid "Indicator"
+msgstr "<b>Indicator</b>"
+
+#: prefs.xml:156
+msgid "Always visible"
+msgstr "Întotdeauna vizibil"
+
+#: prefs.xml:175
+msgid "Show updates count on indicator"
+msgstr "Arată numărul actualizărilor în indicator"
+
+#: prefs.xml:195
+msgid ""
+"Auto-expand updates list if updates count is less than this number (0 to "
+"disable)"
+msgstr ""
+
+#: prefs.xml:218
+#, fuzzy
+msgid "Notification"
+msgstr "<b>Notificare</b>"
+
+#: prefs.xml:233
+msgid "Send a notification when new updates are available"
+msgstr "Trimite notificare când noi actualizări sunt disponibile"
+
+#: prefs.xml:252
+msgid "Use transient notifications (auto dismiss)"
+msgstr "Folosește notificări tranzitorii (auto închidere)"
+
+#: prefs.xml:271
+msgid "How much information to show on notifications"
+msgstr "Cât de multă informație să fie arătată în notificări"
+
+#: prefs.xml:279
+msgid "Count only"
+msgstr "Doar număr"
+
+#: prefs.xml:280
+msgid "New updates names"
+msgstr "Nunele noilor actualizări"
+
+#: prefs.xml:281
+msgid "All updates names"
+msgstr "Numele tuturor actualizărilor"
+
+#: prefs.xml:296
+#, fuzzy
+msgid "Basic settings"
+msgstr "Setări"
+
+#: prefs.xml:312
+#, fuzzy
+msgid "Command to check for package updates"
+msgstr "Comandă pentru actualizarea pachetelor"
+
+#: prefs.xml:329
+msgid "Command to update packages"
+msgstr "Comandă pentru actualizarea pachetelor"
+
+#: prefs.xml:346
+msgid "Pacman local directory path - To detect when new packages are installed"
+msgstr ""
+"Calea locală a dosarului Pacman - Pentru a detecta când noi pachete sunt "
+"instalate"
+
+#: prefs.xml:363
+#, fuzzy
+msgid "Advanced settings"
+msgstr "<b>Setări avansate</b>"
+
+#~ msgid "<b>Timers</b>"
+#~ msgstr "<b>Cronometre</b>"
I file binari arch-update/locale/ro_RO/LC_MESSAGES/arch-update.mo e arch-update-new/locale/ro_RO/LC_MESSAGES/arch-update.mo sono diversi
diff -rupN arch-update/metadata.json arch-update-new/metadata.json
--- arch-update/metadata.json	2017-10-09 10:17:01.000000000 +0200
+++ arch-update-new/metadata.json	2017-10-15 19:02:12.000000000 +0200
@@ -1,6 +1,6 @@
 {
-  "description": "Update indicator for Arch Linux and GNOME Shell.\nCan support AUR or other distros by changing command used to check for and apply updates.", 
-  "name": "Arch Linux Updates Indicator",
+  "description": "Update indicator for Manjaro Linux and GNOME Shell.\nSupports AUR and integrates with pamac and mhwd.", 
+  "name": "Manjaro Linux Updates Indicator",
   "shell-version": [
     "3.18",
     "3.20",
@@ -8,7 +8,7 @@
     "3.24",
     "3.26"
   ], 
-  "url": "https://github.com/RaphaelRochet/arch-update", 
-  "uuid": "arch-update@RaphaelRochet", 
+  "url": "https://github.com/Chrysostomus/arch-update", 
+  "uuid": "manjaro-update@Chrysostomus", 
   "version": 24
 }
diff -rupN arch-update/prefs.js arch-update-new/prefs.js
--- arch-update/prefs.js	2017-10-09 10:17:01.000000000 +0200
+++ arch-update-new/prefs.js	2017-10-15 19:02:12.000000000 +0200
@@ -42,7 +42,7 @@ function buildPrefsWidget(){
 	let box = buildable.get_object('prefs_widget');
 
 	let version_label = buildable.get_object('version_info');
-	version_label.set_text('[Arch-update v' + Me.metadata.version.toString() + ']');
+	version_label.set_text('[Manjaro-update v' + Me.metadata.version.toString() + ']');
 
 	// Bind fields to settings
 	settings.bind('boot-wait' , buildable.get_object('field_wait') , 'value' , Gio.SettingsBindFlags.DEFAULT);
diff -rupN arch-update/schemas/org.gnome.shell.extensions.arch-update.gschema.xml arch-update-new/schemas/org.gnome.shell.extensions.arch-update.gschema.xml
--- arch-update/schemas/org.gnome.shell.extensions.arch-update.gschema.xml	2017-10-09 10:17:01.000000000 +0200
+++ arch-update-new/schemas/org.gnome.shell.extensions.arch-update.gschema.xml	2017-10-15 19:02:12.000000000 +0200
@@ -51,13 +51,13 @@
     </key>
 
     <key name="check-cmd" type="s">
-      <default>"/usr/bin/checkupdates"</default>
+      <default>"/usr/bin/update-check"</default>
       <summary>Command to run to check for updated packages.</summary>
       <description>Command to run to check for updated packages.</description>
     </key>
 
     <key name="update-cmd" type="s">
-      <default>"gnome-terminal -e 'sh -c  \"sudo pacman -Syu ; echo Done - Press enter to exit; read\" '"</default>
+      <default>"update-command" '"</default>
       <summary>Command to run to update packages.</summary>
       <description>Command to run to update packages.</description>
     </key>
